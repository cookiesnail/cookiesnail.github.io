<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>crypto_note</title>
    <link href="/2024/09/20/crypto-note/"/>
    <url>/2024/09/20/crypto-note/</url>
    
    <content type="html"><![CDATA[<h3 id="Shannon-Privacy"><a href="#Shannon-Privacy" class="headerlink" title="Shannon Privacy"></a>Shannon Privacy</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ads_note</title>
    <link href="/2024/09/12/ads-note/"/>
    <url>/2024/09/12/ads-note/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>&#39;sys2_note&#39;</title>
    <link href="/2024/09/11/sys2-note/"/>
    <url>/2024/09/11/sys2-note/</url>
    
    <content type="html"><![CDATA[<h3 id="The-instruction-execution-of-CPU"><a href="#The-instruction-execution-of-CPU" class="headerlink" title="The instruction execution of CPU"></a>The instruction execution of CPU</h3><ul><li>Fetch</li><li>Instruction decodinng &amp; Read Oprerand</li><li>Executive Control</li><li>Memory access</li><li>Write results to register</li></ul><h3 id="Memory-Address"><a href="#Memory-Address" class="headerlink" title="Memory Address"></a>Memory Address</h3><ul><li>big endian:78|56|34|12</li><li>small endian:12|34|56|78</li></ul><h3 id="Four-ISA-Design-Principles"><a href="#Four-ISA-Design-Principles" class="headerlink" title="Four ISA Design Principles"></a>Four ISA Design Principles</h3><p>1.Simplicity favors regularity<br>2.Smaller is faster<br>3.Make the common case fast<br>4.Good design demands good compromises</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每日一题</title>
    <link href="/2024/07/26/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <url>/2024/07/26/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h1><h2 id="2024-7-26-找出分区值"><a href="#2024-7-26-找出分区值" class="headerlink" title="2024.7.26 找出分区值"></a>2024.7.26 找出分区值</h2><h3 id="description"><a href="#description" class="headerlink" title="description"></a>description</h3><p>给你一个 正 整数数组 nums 。<br>将 nums 分成两个数组：nums1 和 nums2 ，并满足下述条件：<br>数组 nums 中的每个元素都属于数组 nums1 或数组 nums2 。<br>两个数组都 非空 。<br>分区值 最小 。<br>分区值的计算方法是 |max(nums1) - min(nums2)| 。<br>其中，max(nums1) 表示数组 nums1 中的最大元素，min(nums2) 表示数组 nums2 中的最小元素。<br>返回表示分区值的整数。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>思路比较简单，最小分区值一定是大小相邻两个元素的差值，所以先排序，再找到最小的相邻差值即可，时间复杂度受限于排序算法，用的是快排，所以为$\Omicron(NlogN)$<br>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span> &#123;<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">int</span>*)a - *(<span class="hljs-type">int</span>*)b;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">findValueOfPartition</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span>&#123;<br>    qsort(nums,numsSize,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>),cmp);<br>    <span class="hljs-type">int</span> min;<br>    <span class="hljs-type">int</span> temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numsSize<span class="hljs-number">-1</span>;i++)&#123;<br>        temp=nums[i+<span class="hljs-number">1</span>]-nums[i];<br>        <span class="hljs-keyword">if</span>(i)&#123;<br>            min=min&lt;temp?min:temp;<br>        &#125;<br>        <span class="hljs-keyword">else</span> min=temp;<br>        <span class="hljs-keyword">if</span>(!temp)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> min;<br>&#125;<br></code></pre></td></tr></table></figure><p>写的时候发现自己居然忘了怎么写快排，所以重新写一遍</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C">    <span class="hljs-type">void</span> <span class="hljs-title function_">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> *a,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span>&#123;<span class="hljs-comment">//快排</span><br>    <span class="hljs-keyword">if</span>(left&gt;right)<span class="hljs-keyword">return</span>;<span class="hljs-comment">//当左下标大于右下标时返回</span><br>    <span class="hljs-type">int</span> key =left,temp;<span class="hljs-comment">//将最左侧设为key值</span><br>    <span class="hljs-type">int</span> mright=right;<span class="hljs-comment">//记录右下标</span><br>    <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>        <span class="hljs-keyword">while</span>(left&lt;right&amp;&amp;a[right]&gt;a[key])right--;<span class="hljs-comment">//从右开始找到小于key值的第一个元素</span><br>        <span class="hljs-keyword">while</span>(left&lt;right&amp;&amp;a[left]&lt;=a[key])left++;<span class="hljs-comment">//从左开始找到大于key的第一个元素</span><br>        temp=a[left];<span class="hljs-comment">//交换left和right指向的两个元素的值</span><br>        a[left]=a[right];<br>        a[right]=temp;<br>    &#125;<br>    temp=a[left];<span class="hljs-comment">//将key值和中间值相交换，此时left指向的元素左边比该元素小，右边的元素都比该元素大</span><br>    a[left]=a[key];<br>    a[key]=temp;<br>    quick_sort(a,key,left<span class="hljs-number">-1</span>);<span class="hljs-comment">//对左边的元素再次进行快排</span><br>    quick_sort(a,left+<span class="hljs-number">1</span>,mright);<span class="hljs-comment">//对右边的元素进行快排</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2024-7-29-棒球比赛"><a href="#2024-7-29-棒球比赛" class="headerlink" title="2024.7.29 棒球比赛"></a>2024.7.29 棒球比赛</h2><h3 id="description-1"><a href="#description-1" class="headerlink" title="description"></a>description</h3><p>你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。<br>比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：<br>整数 x - 表示本回合新获得分数 x<br>“+” - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。<br>“D” - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。<br>“C” - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。<br>请你返回记录中所有得分的总和。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>根据题目用数组实现一个栈，然后模拟就可以了<br>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">calPoints</span><span class="hljs-params">(<span class="hljs-type">char</span>** operations, <span class="hljs-type">int</span> operationsSize)</span> &#123;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>,count=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> * record=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(operationsSize*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;operationsSize;i++)&#123;<br>        <span class="hljs-keyword">if</span>(operations[i][<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;+&#x27;</span>)&#123;<br>            record[count++]=record[count<span class="hljs-number">-1</span>]+record[count<span class="hljs-number">-2</span>];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(operations[i][<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;C&#x27;</span>)&#123;<br>            count--;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(operations[i][<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;D&#x27;</span>)&#123;<br>            record[count++]=record[count<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            record[count++]=atoi(operations[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;count;i++)&#123;<br>        sum+=record[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><p>学到了一个新函数atoi，是stdlib库里面的，用来将字符串转换为整数</p><h2 id="2024-7-30-双模幂运算"><a href="#2024-7-30-双模幂运算" class="headerlink" title="2024.7.30 双模幂运算"></a>2024.7.30 双模幂运算</h2><h3 id="description-2"><a href="#description-2" class="headerlink" title="description"></a>description</h3><p>给你一个下标从 0 开始的二维数组 variables ，其中 variables[i] &#x3D; [ai, bi, ci, mi]，以及一个整数 target 。<br>如果满足以下公式，则下标 i 是 好下标：<br>0 &lt;&#x3D; i &lt; variables.length<br>((aibi % 10)ci) % mi &#x3D;&#x3D; target<br>返回一个由 好下标 组成的数组，顺序不限 。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>这道题就是简单的判断即可，不过可以通过一些方法来减少时间复杂度<br>比如快速幂的方法，可以将计算幂函数的时间复杂度由O(N)减小到O(logN),同时因为太大的幂指数可能会导致结果溢出，无法正常取模，所以有以下数学计算式：(a+b)%c&#x3D;(a%c+b%c)%c和a<em>b%c&#x3D;a%c</em>b%c%c<br>以及一点小发现，计算机计算x&#x3D;x*x%c的速度比分开计算要慢<br>最后代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><br><span class="hljs-type">int</span> <span class="hljs-title function_">pow_mod</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)</span>&#123;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(y)&#123;<br>        <span class="hljs-keyword">if</span>(y&amp;<span class="hljs-number">1</span>)&#123;<br>            res*=x;<br>            res%=z;<br>        &#125;<br>        x=x*x;<br>        x%=z;<br>        y&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-type">int</span>* <span class="hljs-title function_">getGoodIndices</span><span class="hljs-params">(<span class="hljs-type">int</span>** variables, <span class="hljs-type">int</span> variablesSize, <span class="hljs-type">int</span>* variablesColSize, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span>* returnSize)</span> &#123;<br>    *returnSize=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> *res=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(variablesSize*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;variablesSize;i++)&#123;<br>        <span class="hljs-keyword">if</span>(pow_mod(pow_mod(variables[i][<span class="hljs-number">0</span>],variables[i][<span class="hljs-number">1</span>],<span class="hljs-number">10</span>),variables[i][<span class="hljs-number">2</span>],variables[i][<span class="hljs-number">3</span>])==target)&#123;<br>            res[(*returnSize)++]=i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2024-7-31-覆盖所有点的最少矩形数目"><a href="#2024-7-31-覆盖所有点的最少矩形数目" class="headerlink" title="2024.7.31 覆盖所有点的最少矩形数目"></a>2024.7.31 覆盖所有点的最少矩形数目</h2><h3 id="description-3"><a href="#description-3" class="headerlink" title="description"></a>description</h3><p>给你一个二维整数数组 point ，其中 points[i] &#x3D; [xi, yi] 表示二维平面内的一个点。同时给你一个整数 w 。你需要用矩形 覆盖所有 点。<br>每个矩形的左下角在某个点 (x1, 0) 处，且右上角在某个点 (x2, y2) 处，其中 x1 &lt;&#x3D; x2 且 y2 &gt;&#x3D; 0 ，同时对于每个矩形都 必须 满足 x2 - x1 &lt;&#x3D; w 。<br>如果一个点在矩形内或者在边上，我们说这个点被矩形覆盖了。<br>请你在确保每个点都 至少 被一个矩形覆盖的前提下，最少 需要多少个矩形。<br>注意：一个点可以被多个矩形覆盖。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>几个注意点</p><ul><li>高度没有限制，但长度有，所以只用关注长度即可</li><li>为了求得尽可能少的矩形面积，所以每次x2和x1均相差w即可</li><li>可以先遍历排序好的横坐标，然后更新x2或x1的值，然后更新矩形数量即可</li><li>时间复杂度取决于排序算法，因为用的是快排，所以时间复杂度为O(NlogN)<br>代码如下<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span> &#123;<br>    <span class="hljs-keyword">return</span> (*(<span class="hljs-type">int</span>**)a)[<span class="hljs-number">0</span>] - (*(<span class="hljs-type">int</span>**)b)[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">minRectanglesToCoverPoints</span><span class="hljs-params">(<span class="hljs-type">int</span>** points, <span class="hljs-type">int</span> pointsSize, <span class="hljs-type">int</span>* pointsColSize, <span class="hljs-type">int</span> w)</span> &#123;<br>    qsort(points,pointsSize,<span class="hljs-keyword">sizeof</span>(pointsColSize),cmp);<br>    <span class="hljs-type">int</span> x2=points[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]+w,count=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;pointsSize;i++)&#123;<br>        <span class="hljs-keyword">if</span>(points[i][<span class="hljs-number">0</span>]&gt;x2)&#123;<br>            count++;<br>            x2=points[i][<span class="hljs-number">0</span>]+w;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2024-8-1-心算挑战"><a href="#2024-8-1-心算挑战" class="headerlink" title="2024.8.1 心算挑战"></a>2024.8.1 心算挑战</h2><h3 id="description-4"><a href="#description-4" class="headerlink" title="description"></a>description</h3><p>「力扣挑战赛」心算项目的挑战比赛中，要求选手从 N 张卡牌中选出 cnt 张卡牌，若这 cnt 张卡牌数字总和为偶数，则选手成绩「有效」且得分为 cnt 张卡牌数字总和。 给定数组 cards 和 cnt，其中 cards[i] 表示第 i 张卡牌上的数字。 请帮参赛选手计算最大的有效得分。若不存在获取有效得分的卡牌方案，则返回 0。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>典型的贪心题，主要思路为，先寻找到最大的cnt个数的和，如果是偶数则直接返回，如果不是的话，则在剩下的数中找到最大的奇数和偶数，用和的组成部分中最小的偶数和奇数分别进行替换，选择最后和更大的一个<br>算法时间复杂度取决于排序算法<br>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a,<span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span>&#123;<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">int</span>*)b-*(<span class="hljs-type">int</span>*)a;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">maxmiumScore</span><span class="hljs-params">(<span class="hljs-type">int</span>* cards, <span class="hljs-type">int</span> cardsSize, <span class="hljs-type">int</span> cnt)</span>&#123;<br>    qsort(cards,cardsSize,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>),cmp);<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>,mo=<span class="hljs-number">1000</span>,me=<span class="hljs-number">1000</span>,i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;cnt;i++)&#123;<br>        sum+=cards[i];<br>        <span class="hljs-keyword">if</span>((cards[i]&amp;<span class="hljs-number">1</span>)&amp;&amp;cards[i]&lt;mo)&#123;<br>            mo=cards[i];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!(cards[i]&amp;<span class="hljs-number">1</span>)&amp;&amp;cards[i]&lt;me)&#123;<br>            me=cards[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(sum&amp;<span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> sum;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> osum=<span class="hljs-number">0</span>,esum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(mo!=<span class="hljs-number">1000</span>)&#123;<br>            <span class="hljs-keyword">for</span>(i=cnt;i&lt;cardsSize;i++)&#123;<br>                <span class="hljs-keyword">if</span>(!(cards[i]&amp;<span class="hljs-number">1</span>))&#123;<br>                    osum=sum-mo+cards[i];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(me!=<span class="hljs-number">1000</span>)&#123;<br>            <span class="hljs-keyword">for</span>(i=cnt;i&lt;cardsSize;i++)&#123;<br>                <span class="hljs-keyword">if</span>(cards[i]&amp;<span class="hljs-number">1</span>)&#123;<br>                    esum=sum-me+cards[i];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> osum&gt;esum?osum:esum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度为O(NlogN)，但是其实可以优化，即将快速排序算法改为快速选择算法，用来找到前k大的数的和，可以将时间复杂度优化为O(N)</p><h2 id="2024-8-2-直角三角形"><a href="#2024-8-2-直角三角形" class="headerlink" title="2024.8.2 直角三角形"></a>2024.8.2 直角三角形</h2><h3 id="description-5"><a href="#description-5" class="headerlink" title="description"></a>description</h3><p>给你一个二维 boolean 矩阵 grid 。<br>请你返回使用 grid 中的 3 个元素可以构建的 直角三角形 数目，且满足 3 个元素值 都 为 1 。<br>注意：<br>如果 grid 中 3 个元素满足：一个元素与另一个元素在 同一行，同时与第三个元素在 同一列 ，那么这 3 个元素称为一个 直角三角形 。这 3 个元素互相之间不需要相邻。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p>第 i 行有 rowSum 个 1，第 j 列有 colSum 个 1。根据乘法原理，直角顶点为 (i,j) 的「直角三角形」有(colsum[j]-1)*(rowsum[i]-1)个<br>找直角顶点就行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title function_">numberOfRightTriangles</span><span class="hljs-params">(<span class="hljs-type">int</span>** grid, <span class="hljs-type">int</span> gridSize, <span class="hljs-type">int</span>* gridColSize)</span> &#123;<br>    <span class="hljs-type">int</span> m=gridSize,n=gridColSize[<span class="hljs-number">0</span>],i,j;<br>    <span class="hljs-type">int</span> *rowsum=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(m,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-type">int</span> *colsum=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(n,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                rowsum[i]+=grid[i][j];<br>                colsum[j]+=grid[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(grid[i][j])ans+=(colsum[j]<span class="hljs-number">-1</span>)*(rowsum[i]<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2024-8-3-正方形中的最多点数"><a href="#2024-8-3-正方形中的最多点数" class="headerlink" title="2024.8.3 正方形中的最多点数"></a>2024.8.3 正方形中的最多点数</h2><h3 id="description-6"><a href="#description-6" class="headerlink" title="description"></a>description</h3><p>给你一个二维数组 points 和一个字符串 s ，其中 points[i] 表示第 i 个点的坐标，s[i] 表示第 i 个点的 标签 。<br>如果一个正方形的中心在 (0, 0) ，所有边都平行于坐标轴，且正方形内 不 存在标签相同的两个点，那么我们称这个正方形是 合法 的。<br>请你返回 合法 正方形中可以包含的 最多 点数。<br>注意：<br>如果一个点位于正方形的边上或者在边以内，则认为该点位于正方形内。<br>正方形的边长可以为零。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p>影响点在不在正方形内的关键因素是每个点横纵坐标中绝对值最大的那个，即切比雪夫距离，所以关键点就是找到，所有字母标签对应的点，有重复的点中切比雪夫距离第二大的那个数，然后所有标签的点，只要最小切比雪夫距离小于这个数就能在三角形当中。<br>所以用一个数组min1[26]来维护不同标签的点切比雪夫距离的最小值，再用min2来维护所有重复的点中除最小切比雪夫距离外次小的值，最后计数即可；<br>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">maxPointsInsideSquare</span><span class="hljs-params">(<span class="hljs-type">int</span>** points, <span class="hljs-type">int</span> pointsSize, <span class="hljs-type">int</span>* pointsColSize, <span class="hljs-type">char</span>* s)</span> &#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> min1[<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)min1[i]=INT_MAX;<br>    <span class="hljs-type">int</span> min2=INT_MAX;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;pointsSize;i++)&#123;<br>        <span class="hljs-type">int</span> dis=(<span class="hljs-built_in">abs</span>(points[i][<span class="hljs-number">0</span>])&gt;<span class="hljs-built_in">abs</span>(points[i][<span class="hljs-number">1</span>]))?<span class="hljs-built_in">abs</span>(points[i][<span class="hljs-number">0</span>]):<span class="hljs-built_in">abs</span>(points[i][<span class="hljs-number">1</span>]);<br>        <span class="hljs-type">int</span> temp=s[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(dis&lt;min1[temp])&#123;<br>            min2=(min2&lt;min1[temp])?min2:min1[temp];<br>            min1[temp]=dis;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dis&lt;min2)&#123;<br>            min2=dis;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)<span class="hljs-keyword">if</span>(min1[i]&lt;min2)sum++;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2024-8-4-另一棵树的子树"><a href="#2024-8-4-另一棵树的子树" class="headerlink" title="2024.8.4 另一棵树的子树"></a>2024.8.4 另一棵树的子树</h2><h3 id="description-7"><a href="#description-7" class="headerlink" title="description"></a>description</h3><p>给你两棵二叉树 root 和 subRoot 。检验 root 中是否包含和 subRoot 具有相同结构和节点值的子树。如果存在，返回 true ；否则，返回 false 。<br>二叉树 tree 的一棵子树包括 tree 的某个节点和这个节点的所有后代节点。tree 也可以看做它自身的一棵子树。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><p>方法很简单，对树中的每个节点都判断是否与subtree相同即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     struct TreeNode *left;</span><br><span class="hljs-comment"> *     struct TreeNode *right;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">issametree</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> TreeNode* p,<span class="hljs-keyword">struct</span> TreeNode* q)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!q&amp;&amp;!p)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(!q||!p)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(p-&gt;val!=q-&gt;val)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> issametree(p-&gt;left,q-&gt;left)&amp;&amp;issametree(q-&gt;right,p-&gt;right);<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isSubtree</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> TreeNode* root, <span class="hljs-keyword">struct</span> TreeNode* subRoot)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!root)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-keyword">if</span>(issametree(root,subRoot))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">return</span> isSubtree(root-&gt;left,subRoot)||isSubtree(root-&gt;right,subRoot);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2024-8-5-不含连续1的非负整数"><a href="#2024-8-5-不含连续1的非负整数" class="headerlink" title="2024.8.5 不含连续1的非负整数"></a>2024.8.5 不含连续1的非负整数</h2><h3 id="description-8"><a href="#description-8" class="headerlink" title="description"></a>description</h3><p>给定一个正整数 n ，请你统计在 [0, n] 范围的非负整数中，有多少个整数的二进制表示中不存在 连续的 1 。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h3><p>这道题如果暴力的话时间肯定不够，所以我套了灵神的数位dp模板<a href="https://leetcode.cn/link/?target=https://www.bilibili.com/video/BV1rS4y1s721/?t=20m05s">数位dp模板</a><br>值得注意的是，即使改成类似的动态规划，依然需要采取记忆化的手段才能减少大数的时间<br>最后代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> pos,<span class="hljs-type">int</span> pre,<span class="hljs-type">int</span> limit,<span class="hljs-type">int</span> n,<span class="hljs-type">int</span>* mem)</span>&#123;<br>    <span class="hljs-keyword">if</span>(pos&lt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> up;<br>    <span class="hljs-keyword">if</span>(limit)up=n&gt;&gt;pos&amp;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> up=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> res,index=<span class="hljs-number">2</span>*pos;<br>    <span class="hljs-keyword">if</span>(limit)&#123;<br>        res=dfs(pos<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,(up==<span class="hljs-number">0</span>),n,mem);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(!mem[index])<br>            mem[index]=dfs(pos<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,n,mem);<br>        res=mem[index];<br>        &#125;<br>    <span class="hljs-keyword">if</span>(!pre&amp;&amp;up)&#123;<br>        <span class="hljs-keyword">if</span>(limit)&#123;<br>            res+=dfs(pos<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,mem);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(!mem[index+<span class="hljs-number">1</span>])mem[index+<span class="hljs-number">1</span>]=dfs(pos<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n,mem);<br>            res+=mem[index+<span class="hljs-number">1</span>];<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">findIntegers</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,num=n;<br>    <span class="hljs-keyword">while</span>(n)&#123;<br>        n=n&gt;&gt;<span class="hljs-number">1</span>;<br>        i++;<br>    &#125;<br>    <span class="hljs-type">int</span>* mem=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">2</span>*i,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    可以用</span><br><span class="hljs-comment">    int mem[2*i];</span><br><span class="hljs-comment">    memset(mem,0,sizeof(mem));</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> dfs(i<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,num,mem);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2024-8-6-7-3129-找出所有稳定的二进制数组-I-II"><a href="#2024-8-6-7-3129-找出所有稳定的二进制数组-I-II" class="headerlink" title="2024.8.6-7  3129. 找出所有稳定的二进制数组 I&#x2F;II"></a>2024.8.6-7  3129. 找出所有稳定的二进制数组 I&#x2F;II</h2><h3 id="description-9"><a href="#description-9" class="headerlink" title="description"></a>description</h3><p>给你 3 个正整数 zero ，one 和 limit 。<br>一个二进制数组 arr 如果满足以下条件，那么我们称它是 稳定的 ：<br>0 在 arr 中出现次数 恰好 为 zero 。<br>1 在 arr 中出现次数 恰好 为 one 。<br>arr 中每个长度超过 limit的子数组都同时包含 0 和 1 。<br>请你返回稳定二进制数组的总数目。<br>由于答案可能很大，将它对 109 + 7 取余后返回。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h3><p>又是dp题，因为我自己的想法严重超时，又没想出更巧的方法，所以看了别人的题解(开偷),勉强理解了。推荐看这个题解：<a href="https://leetcode.cn/problems/find-all-possible-stable-binary-arrays-ii/solutions/2758868/dong-tai-gui-hua-cong-ji-yi-hua-sou-suo-37jdi/">题解</a><br>题解是递归版本的，参考一下可以改成从前往后的循环版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOD 1000000007</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">numberOfStableArrays</span><span class="hljs-params">(<span class="hljs-type">int</span> zero, <span class="hljs-type">int</span> one, <span class="hljs-type">int</span> limit)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> dfs[zero+<span class="hljs-number">1</span>][one+<span class="hljs-number">1</span>][<span class="hljs-number">2</span>];<br>    <span class="hljs-built_in">memset</span>(dfs, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(dfs));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= limit; i++)<br>    &#123;<br>        dfs[<span class="hljs-number">0</span>][(<span class="hljs-type">int</span>)fmin(i,one)][<span class="hljs-number">1</span>] = dfs[(<span class="hljs-type">int</span>)fmin(i,zero)][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= zero; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= one; j++)<br>        &#123;<br>            dfs[i][j][<span class="hljs-number">0</span>] = (dfs[i<span class="hljs-number">-1</span>][j][<span class="hljs-number">1</span>] + dfs[i<span class="hljs-number">-1</span>][j][<span class="hljs-number">0</span>] + (i - limit - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> ? MOD-dfs[i-limit<span class="hljs-number">-1</span>][j][<span class="hljs-number">1</span>] : <span class="hljs-number">0</span>)) % MOD;<br>            dfs[i][j][<span class="hljs-number">1</span>] = (dfs[i][j<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>] + dfs[i][j<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>] + (j - limit - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> ? MOD-dfs[i][j-limit<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>] : <span class="hljs-number">0</span>)) % MOD;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (dfs[zero][one][<span class="hljs-number">0</span>] + dfs[zero][one][<span class="hljs-number">1</span>]) % MOD;<br>&#125;<br></code></pre></td></tr></table></figure><p>值得注意的是，计算dfs[i][j][0]和dfs[i][j][1]的时候需要先加mod再对mod取余数是为了保证结果恒正，因为有可能从某个dfs开始就大于mod被取余为较小的数据了，所以需要加个mod防止出现负数。</p><h2 id="2024-8-8-找出与数组相加的整数I"><a href="#2024-8-8-找出与数组相加的整数I" class="headerlink" title="2024.8.8 找出与数组相加的整数I"></a>2024.8.8 找出与数组相加的整数I</h2><h3 id="description-10"><a href="#description-10" class="headerlink" title="description"></a>description</h3><p>给你两个长度相等的数组 nums1 和 nums2。<br>数组 nums1 中的每个元素都与变量 x 所表示的整数相加。如果 x 为负数，则表现为元素值的减少。<br>在与 x 相加后，nums1 和 nums2 相等 。当两个数组中包含相同的整数，并且这些整数出现的频次相同时，两个数组 相等 。<br>返回整数 x 。</p><h3 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h3><p>太简单了直接看代码吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">addedInteger</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums1, <span class="hljs-type">int</span> nums1Size, <span class="hljs-type">int</span>* nums2, <span class="hljs-type">int</span> nums2Size)</span> &#123;<br>    <span class="hljs-type">int</span> max1=<span class="hljs-number">0</span>,max2=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums1Size;i++)&#123;<br>        <span class="hljs-keyword">if</span>(nums1[i]&gt;max1)max1=nums1[i];<br>        <span class="hljs-keyword">if</span>(nums2[i]&gt;max2)max2=nums2[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> max2-max1;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度为O(N)</p><h2 id="2024-8-13-特殊数组I"><a href="#2024-8-13-特殊数组I" class="headerlink" title="2024.8.13 特殊数组I"></a>2024.8.13 特殊数组I</h2><h3 id="description-11"><a href="#description-11" class="headerlink" title="description"></a>description</h3><p>如果数组的每一对相邻元素都是两个奇偶性不同的数字，则该数组被认为是一个 特殊数组 。<br>Aging 有一个整数数组 nums。如果 nums 是一个 特殊数组 ，返回 true，否则返回 false。</p><h3 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a>题解</h3><p>太简单了，没有写题解的必要<br>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">bool</span> <span class="hljs-title function_">isArraySpecial</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span> &#123;<br>    <span class="hljs-type">int</span> flag=(nums[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>)&amp;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numsSize;i++)&#123;<br>        <span class="hljs-keyword">if</span>(flag==(nums[i]&amp;<span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        flag=(flag+<span class="hljs-number">1</span>)&amp;<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2024-8-14-特殊数组II"><a href="#2024-8-14-特殊数组II" class="headerlink" title="2024.8.14 特殊数组II"></a>2024.8.14 特殊数组II</h2><h3 id="description-12"><a href="#description-12" class="headerlink" title="description"></a>description</h3><p>如果数组的每一对相邻元素都是两个奇偶性不同的数字，则该数组被认为是一个 特殊数组 。<br>你有一个整数数组 nums 和一个二维整数矩阵 queries，对于 queries[i] &#x3D; [fromi, toi]，请你帮助你检查<br>子数组nums[fromi..toi] 是不是一个特殊数组。<br>返回布尔数组 answer，如果 nums[fromi..toi] 是特殊数组，则 answer[i] 为 true ，否则，answer[i] 为 false 。</p><h3 id="题解-12"><a href="#题解-12" class="headerlink" title="题解"></a>题解</h3><p>思路是用一个数组s来表示连续的同奇偶数的数量， 如s[i]&#x3D;s[i-1]+(num[i-1]%2&#x3D;&#x3D;num[i]%2);<br>如果s[from]&#x3D;&#x3D;s[to],则对应的数组为特殊数组。<br>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Note: The returned array must be malloced, assume caller calls free().</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">bool</span>* <span class="hljs-title function_">isArraySpecial</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span>** queries, <span class="hljs-type">int</span> queriesSize, <span class="hljs-type">int</span>* queriesColSize, <span class="hljs-type">int</span>* returnSize)</span> &#123;<br>    <span class="hljs-type">int</span>* s=<span class="hljs-built_in">malloc</span>(numsSize*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    s[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span>* ans=<span class="hljs-built_in">malloc</span>(queriesSize*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">bool</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;numsSize;i++)&#123;<br>        s[i]=s[i<span class="hljs-number">-1</span>]+((nums[i]%<span class="hljs-number">2</span>)==(nums[i<span class="hljs-number">-1</span>]%<span class="hljs-number">2</span>));<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;queriesSize;i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[queries[i][<span class="hljs-number">0</span>]]==s[queries[i][<span class="hljs-number">1</span>]])ans[i]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> ans[i]=<span class="hljs-literal">false</span>;<br>    &#125;<br>    *returnSize=queriesSize;    <br>    <span class="hljs-keyword">return</span> ans;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2024-8-15-矩阵中的最大得分"><a href="#2024-8-15-矩阵中的最大得分" class="headerlink" title="2024.8.15 矩阵中的最大得分"></a>2024.8.15 矩阵中的最大得分</h2><h3 id="description-13"><a href="#description-13" class="headerlink" title="description"></a>description</h3><p>给你一个由 正整数 组成、大小为 m x n 的矩阵 grid。你可以从矩阵中的任一单元格移动到另一个位于正下方或正右侧的任意单元格（不必相邻）。从值为 c1 的单元格移动到值为 c2 的单元格的得分为 c2 - c1 。<br>你可以从 任一 单元格开始，并且必须至少移动一次。<br>返回你能得到的 最大 总得分。</p><h3 id="题解-13"><a href="#题解-13" class="headerlink" title="题解"></a>题解</h3><p>对终点为grid[i][j]的一个移动方案来说，它对应的最大距离的起点一定在它的右上方，所以用colmin来保存更新每列的最小值，再用premin来记录从gird[0-i-1][j]最小的值，然后找到最大的ans即可<br>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">maxScore</span><span class="hljs-params">(<span class="hljs-type">int</span>** grid, <span class="hljs-type">int</span> gridSize, <span class="hljs-type">int</span>* gridColSize)</span> &#123;<br>    <span class="hljs-type">int</span> m=*gridColSize;    <br>    <span class="hljs-type">int</span>* colmin=<span class="hljs-built_in">malloc</span>(m*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        colmin[i]=INT_MAX;<br>    &#125;<br>    <span class="hljs-type">int</span> ans=INT_MIN,new;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;gridSize;i++)&#123;<br>        <span class="hljs-type">int</span> pre_min=INT_MAX;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            new=grid[i][j]-(pre_min&lt;colmin[j]?pre_min:colmin[j]);<br>            ans=ans&gt;new?ans:new;<br>            colmin[j]=colmin[j]&lt;grid[i][j]?colmin[j]:grid[i][j];<br>            pre_min=pre_min&lt;colmin[j]?pre_min:colmin[j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2024-8-16-3117-划分数组得到最小值的和"><a href="#2024-8-16-3117-划分数组得到最小值的和" class="headerlink" title="2024.8.16 3117 划分数组得到最小值的和"></a>2024.8.16 3117 划分数组得到最小值的和</h2><p>rating 2700+ 先吃饭吧</p><h2 id="2024-8-17-K-周期字符串需要的最少操作次数"><a href="#2024-8-17-K-周期字符串需要的最少操作次数" class="headerlink" title="2024.8.17 K 周期字符串需要的最少操作次数"></a>2024.8.17 K 周期字符串需要的最少操作次数</h2><h3 id="description-14"><a href="#description-14" class="headerlink" title="description"></a>description</h3><p>给你一个长度为 n 的字符串 word 和一个整数 k ，其中 k 是 n 的因数。<br>在一次操作中，你可以选择任意两个下标 i 和 j，其中 0 &lt;&#x3D; i, j &lt; n ，且这两个下标都可以被 k 整除，然后用从 j 开始的长度为 k 的子串替换从 i 开始的长度为 k 的子串。也就是说，将子串 word[i..i + k - 1] 替换为子串 word[j..j + k - 1] 。<br>返回使 word 成为 K 周期字符串 所需的 最少 操作次数。<br>如果存在某个长度为 k 的字符串 s，使得 word 可以表示为任意次数连接 s ，则称字符串 word 是 K 周期字符串 。例如，如果 word &#x3D;&#x3D; “ababab”，那么 word 就是 s &#x3D; “ab” 时的 2 周期字符串 。</p><h3 id="题解-14"><a href="#题解-14" class="headerlink" title="题解"></a>题解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python3">class Solution:<br>    def minimumOperationsToMakeKPeriodic(self, word: str, k: int) -&gt; int:<br>        n = len(word)<br>        cnt = Counter(word[i - k: i] for i in range(k, n + 1, k))<br>        mx = max(cnt.values())<br>        return n // k - mx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>practice</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>csapp note</title>
    <link href="/2024/07/25/csapp/"/>
    <url>/2024/07/25/csapp/</url>
    
    <content type="html"><![CDATA[<h1 id="Computer-Systems-A-Programmer’s-Perspective"><a href="#Computer-Systems-A-Programmer’s-Perspective" class="headerlink" title="Computer Systems A Programmer’s Perspective"></a>Computer Systems A Programmer’s Perspective</h1><h2 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h2><p>Information is bits + context:all informations in a system is represented as a bunch of bits,the meaning depend on the context we view them.<br>high-level program-&gt;low-level machine-language instructions-&gt;executable object program<br>source program(hello.c)$\xrightarrow{Pre-processor(cpp)}$Modified source program(hello.i)$\xrightarrow{Compiler(cc1)}$Assembly program(hello.s)$\xrightarrow[text-&gt;binary]{Assembler(as)}$Relocatable object programs(hello.o,printf.o)$\xrightarrow{Linker(ld)}$Executable object program(hello)<br>the contexts on the four arrows are known collectively as the compilation system(编译系统)<br><img src="/../img/figure1.jpg" alt="figure1.4"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>system</tag>
      
      <tag>book</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学复习</title>
    <link href="/2024/07/25/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%A4%8D%E4%B9%A0/"/>
    <url>/2024/07/25/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="概率论部分"><a href="#概率论部分" class="headerlink" title="概率论部分"></a>概率论部分</h1><ul><li>独立时 $P[AB]&#x3D;P[A]P[B]$<br>注意独立（independence)$\neq$mutually exclusive<br>当independence$\land$mutually exclusive时应该有A$\land$B&#x3D;$\varnothing$</li><li><strong>Discrete Random Variable</strong><ul><li><p><strong>probability mass function(PMF)</strong><br>F$_X$($x$)&#x3D;P[X&#x3D;$x$]<br>P(n,k)&#x3D;${n!\over (n-k)!}$<br>C(n,k)&#x3D;${n!\over (n-k)!k!}$&#x3D;$\small\binom nr$  </p></li><li><p><strong>Bernoulli Random Variable</strong><br>$E[X]&#x3D;p$<br>$Var[X]&#x3D;p(1-p)$<br>$$P_X(x)&#x3D;<br>\begin{cases}<br>1-p, &amp;\text{x&#x3D;0}\<br>p, &amp;\text{x&#x3D;1}\<br>0, &amp;\text{otherwise}<br>\end{cases}<br>$$  </p></li><li><p><strong>Geometric Random Variable</strong><br>Describe the <strong>first occurrence</strong> in a sequence of trials<br>$E[X]&#x3D;\frac1p$<br>$Var[X]&#x3D;\frac{(1-p)}{p^2}$<br>$P_X(x)&#x3D;p(1-p)^{x-1}\quad x&#x3D;1,2\cdots$  </p></li><li><p><strong>Binomial Random Variable</strong><br>$E[X]&#x3D;np$<br>$Var[X]&#x3D;np(1-p)$<br>$P_K(k)&#x3D;\binom nkp^k(1-p)^{n-k}\quad k&lt;n$</p></li><li><p><strong>Pascal Distribution</strong><br>x次重复独立实验中事件出现k次的概率<br>$E[X]&#x3D;\frac kp$<br>$Var[X]&#x3D;\frac{k(1-p)}{p^2}$<br>$P_X(x)&#x3D;\binom {x-1}{k-1}p^k(1-p)^{x-k}\quad x&gt;k$  </p></li><li><p><strong>Discrete Uniform Random Variable</strong><br>$E[X]&#x3D;\frac {k+l}2$<br>$Var[X]&#x3D;\frac{(l-k)(l-k+2)}{12}$<br>$$P_X(x)&#x3D;<br>\begin{cases}<br>{1 \over{l-k+1}}, &amp;\text{x&#x3D;k,k+1,k+2,$\cdots$,l}\<br>0, &amp;\text{otherwise}\<br>\end{cases}<br>$$  </p></li><li><p><strong>Poisson Random Variable</strong><br>describe <strong>a given number of events occurring in a fixed interval of time</strong> if these events occur with a <strong>known average rate</strong> and <strong>independently</strong> of the time since the last event<br>$a\ in\ range\ a&gt;0$</p><p>$$P_X(x)&#x3D;<br>\begin{cases}<br>{a^xe^{-a} \over{x!}}, &amp;\text{x&#x3D;0,1,2,$\cdots$}\<br>0, &amp;\text{otherwise}\<br>\end{cases}<br>$$  </p></li><li><p><strong>Cumulative Distribution Function(CDF)</strong><br>$F_X(x)&#x3D;P[X\le x]$<br>1.$F_X(-{\infty})&#x3D; 0 and F_X({\infty})&#x3D; 1$<br>2.$for\ all \ a&gt;b,F_X(a){\ge}F_X(b)$<br>3.$for\ x{\in}S,\epsilon\in R,\lim_{\epsilon \to 0}F_X(x-\epsilon)&#x3D;P_X(x)$<br>4.$if\ x_i\le x\le x_{i+1}F_X(x)&#x3D;F_X(x_i)$</p></li><li><p><strong>Median</strong><br>if x&#x3D;median then $P[X\le x]\ge \frac12,P[X\ge x]\ge \frac12$</p></li><li><p><strong>Mode</strong><br>$x_{mod}\ satisfying\ P_X(x_{mod}\ge P_X(x)\ for \ all\ x$  </p></li><li><p>Expected Value(期望)<br>$\Sigma xP_X(x)$  </p></li><li><p><strong>Derived Random Variable</strong><br>$P_Y(y)&#x3D;\Sigma P_X(x)(x:g(x)&#x3D;y)$<br>$E[Y]&#x3D;\Sigma g(x)P_X(x)$<br>$E[aX+b]&#x3D;aE[X]+b$  </p></li><li><p><strong>Variance(方差)</strong></p><p>$$<br>Var[X]&#x3D;E[(X-\mu x)^2]\<br>Var[X]&#x3D;E[X^2]-(E[X])^2\<br>Var[aX+b]&#x3D;a^2Var[X]<br>$$  </p></li><li><p><strong>Standard Deviation</strong><br>$\sigma _X&#x3D;\sqrt {Var[X]}$  </p></li><li><p><strong>Moments</strong><br>$The$ <em>n</em>$th\ moment\ is\ E[X^n]$<br>$The$ <em>n</em>$th\ central\ momnent\ is E[(X-\mu X)^n]$</p></li></ul></li><li><strong>Continunous Random Variable</strong>  <ul><li><strong>Cumulative Distribution Function(CDF)</strong><br>$F_X(x)&#x3D;P[X\le x]$<br>$P[x_1&lt;x\le x_2] &#x3D; F_X(x_2)-F_X(x_1)$  </li><li><strong>Probability Density Function</strong><br>$f_X(x)&#x3D;\frac{dF_X(x)}{dx}$<br>$f_X(x)\ge 0\ for\ all\ x$<br>$F_X(x)&#x3D;\int^x_{-\infty}f_X(\mu)d\mu$<br>$\int^{\infty}_{-\infty}f_X(x)dx&#x3D;1$  </li><li><strong>Expected Value</strong><br>$E[X]&#x3D;\int^{\infty}_{-\infty}xf_X(x)dx$</li><li><strong>Uniform Random Variable</strong><br>$f_X(x)&#x3D;\frac 1{(b-a)}\quad a\le x&lt;b$<br>$$<br>F_X(x)&#x3D;\begin{cases}<br>0, &amp;\text{x$\le$a}\<br>\frac {x-a}{b-a}, &amp;\text{a&lt;x$\le$b}\<br>1,&amp;\text{x&gt;b}\<br>\end{cases}<br>$$<br>$E[X]&#x3D;\frac {b+a}2$<br>$Var[X]&#x3D;\frac{(b-a)^2}{12}$  </li><li><strong>Gaussian Random Variables</strong><br>$f_X(x)&#x3D;\frac 1{\sqrt {2\pi \sigma^2}}e^{-(x-\mu)^2&#x2F;2\sigma^2}$<br>parameter $\mu$ can be any real number and the parameter $\sigma &gt;0$<br>$E[X]&#x3D;\mu\quad Var[X]&#x3D;\sigma^2$<br>CDF:$F_X(x)&#x3D;\Phi(\frac{x-\mu} \sigma)$</li><li><strong>Standard Normal Random Variable</strong><br>The standard normal random variable Z is the Gaussian(0,1) random variable.<br>CDF:$\Phi(z)&#x3D;\frac1{\sqrt {2\pi}}\int^z_{-\infty}e^{-\mu^2&#x2F;2}d\mu$<br>$\Phi(-z)&#x3D;1-\Phi(z)$</li></ul></li><li><strong>Joint Probability Mass Functon</strong><br>$P_{X,Y}(x,y)&#x3D;P[X&#x3D;x,Y&#x3D;y]$<br>$P[B]&#x3D;\Sigma P_{X,Y}(x,y)\quad (x,y)\in B$  </li><li><strong>Marginal PMF</strong><br>$P_X(x)&#x3D;\Sigma P_{X,Y}(x,y)$离散用加法，连续用积分，求$P_Y(y)$同理  </li><li><strong>Joint PDF</strong><br>$F_{X,Y}(x,y)&#x3D;\int^x_{-\infty}d\mu\int^y_{-\infty}f_{X,Y}(\mu,\upsilon)d\upsilon$<br>$\int^{\infty}<em>{-\infty}d\mu\int^{\infty}</em>{-\infty}f_{X,Y}(\mu,\upsilon)d\upsilon&#x3D;1$  </li><li><strong>Covariance</strong><br>$Cov[X,Y]&#x3D;E[(X-\mu Y)(Y-\mu Y)]$<br>$Cov[X,Y]&#x3D;E[XY]-\mu x\mu y$<br>$Var[X+Y]&#x3D;Var[X]+Var[Y]+2Cov[X,Y]$</li></ul><p>$$<br>Variables\ tend\ to\ be<br>  \begin{cases}<br>  similar\ behavior,&amp;\text{Cov&gt;0}\<br>  opposite\ behavior,&amp;text{Cov&lt;0}\<br>  uncorrelated\ behavior,&amp;text{Cov&#x3D;0}<br>  \end{cases}<br>$$  </p><ul><li><strong>Correlation Coefficient</strong><br>$\rho_{X,Y}&#x3D;\frac{Cov[X,Y]}{\sqrt {Var[X]Var[Y]}}&#x3D;\frac{Cov[X,Y]}{\sigma_X\sigma_Y}$<br>$if\ X&#x3D;aX+b\land Y&#x3D;cY+d$<br>$\rho X,Y&#x3D;\rho X,Y,Cov[X,Y]&#x3D;acCov[X,Y]$  </li><li><strong>Correlation</strong><br>$rX,Y&#x3D;E[XY]$<br>$Cov[X,Y]&#x3D;rX,Y-\mu X\mu Y$  </li><li><strong>Uncorrelated Random Variables</strong><br>$if Cov[X,Y]&#x3D;0$<br>$E[g(X)h(y)]&#x3D;E[g(X)]E[h(Y)]$<br>$rX,Y&#x3D;E[XY]&#x3D;E[X]E[Y]$<br>$Cov[X,Y]&#x3D;\sigma X,Y&#x3D;0$<br>$Var[X+Y]&#x3D;Var[X]+Var[Y]$  </li><li><strong>Conditional PMF</strong><br>$P_{X|Y}(x|y)&#x3D;\frac {P_{X,Y}(x,y)}{P_Y(y)}\quad P_{Y|X}(y|x)同理$  </li><li><strong>Conditional PDF</strong><br>$f_{X|Y}(x|y)&#x3D;\frac {f_{X,Y}(x,y)}{f_Y(y)}\quad f_{Y|X}(y|x)同理$  </li><li><strong>Sum Of The Expected Value</strong><br>$W_n &#x3D;X_1+\cdots+X_n$<br>$E[W_n]&#x3D;E[X_1]+E[X_2]+\cdots+E[X_n]$<br>$Var[W_n]&#x3D;\Sigma^n_{i&#x3D;1}Var[X_i]+2\Sigma^{n-1}<em>{i&#x3D;1}\Sigma^n</em>{j&#x3D;i+1}Cov[X_i,X_j]\quad 所以各自独立时，后半部分为0$  </li><li><strong>Central Limit Theorem</strong><br>Given $X_1,X_2,\dots,X_n$ a sequence of independent and identically distributed random variables with expected value $\mu_X$ and variance $\sigma^2_X$,the CDF of $Z_n&#x3D;(\Sigma^n_{i&#x3D;1}X_i-n\mu_X)&#x2F;\sqrt {n\sigma^2_X}$ has the property $\lim_{n\to{\infty}}F_{Z_n}(z)&#x3D;\Phi(z)$</li></ul><blockquote><p>CDF:$\Phi(z)&#x3D;\frac1{\sqrt {2\pi}}\int^z_{-\infty}e^{-\mu^2&#x2F;2}d\mu$</p></blockquote><ul><li><p><strong>De Moivre-Laplace Formula</strong><br>For abinomial$(n,p)$random variable K,<br>$P[k_1\le K\le k_2]\approx \Phi(\frac {k_2+0.5-np}{\sqrt{np(1-p)}})-\Phi(\frac{k_1-0.5-np}{\sqrt{np(1-p)}})$</p></li><li><p><strong>Sample Mean</strong><br>多次独立重复实验样本的平均值<br>$M_n(X)&#x3D;\frac{X_1+\cdots+X_n}n$<br>As n increases,$M_n(X)\to E[X]$<br>$E[M_n(X)]&#x3D;E[X]\quad Var[M_n(X)]&#x3D;\frac {Var[X]}n$<br>The sample mean $M_n(X)$ is an unbiased estimate of$E[X]$</p></li><li><p><strong>Useful Inequalities in Probality</strong></p><ul><li><strong>Markov Inequality</strong><br>For a random variable $X$,such that $P[X&lt;0]&#x3D;0$,and a constant c,<br>$P[X\ge c^2]\le \frac{E[X]}{c^2}$</li><li><strong>Chebyshev Inequality</strong><br>$P[|Y-\mu_Y|\ge c]\le \frac{Var[Y]}{c^2}$<br>$P[|M_n(X)-\mu_X|\ge c]\le \frac {Var[X]}{nc^2}\quad 所以当n趋于无穷时，该式趋于1$</li></ul></li><li><p><strong>Mean Square Error</strong><br>$e&#x3D;E[(R-r)^2]$</p></li><li><p><strong>Sample Variance</strong><br>$V_n(X)&#x3D;\frac 1n\Sigma^n_{i&#x3D;1}(X_i-M_n(X))^2$<br>$E[V_n(X)]&#x3D;\frac{n-1}nVar[X]$</p></li><li><p><strong>Confidence Intervals</strong><br>$P[|M_n(X)-\mu_X|&lt; c]\ge 1- \frac {Var[X]}{nc^2}&#x3D;1-\alpha$<br>$1-\alpha$ is hte cpnfidence coefficient<br>Confidence Intervals $(\mu_X-c,\mu_X+c)$<br>if X be a Gaunssian$(\mu,\sigma)$random variable,has confidence coefficient $1-\alpha$,where $\frac{\alpha}2&#x3D;Q(c\sqrt n&#x2F;\sigma)&#x3D;1-\Phi(c\sqrt n&#x2F;\sigma)$<br>Thus $1-\alpha&#x3D;1-2Q(c\sqrt n&#x2F;\sigma)&#x3D;2\Phi(c\sqrt n&#x2F;\sigma)-1$</p></li><li><p><strong>Stochastic Process(随机过程)</strong><br>Sample function x(t,s) is the time function associated with outcome $s$ of an experiment<br>All possible Sample function are ensample</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>takeaway</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/20/hello-world/"/>
    <url>/2024/07/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
